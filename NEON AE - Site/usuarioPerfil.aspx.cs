using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.UI; using System.Web.UI.WebControls; using System.Data; using System.IO; using System.Drawing; public partial class usuarioPerfil : System.Web.UI.Page { Criptografia cripto = new Criptografia("NEON"); protected void Page_Load(object sender, EventArgs e) { try { if (!IsPostBack) { sqlUsuario.SelectParameters["EMAIL"].DefaultValue = Session["emailusu"].ToString(); DataView dv = (DataView)sqlUsuario.Select(DataSourceSelectArguments.Empty); DateTime dt = Convert.ToDateTime(cripto.Decrypt(dv.Table.Rows[0]["dtnasc_usu"].ToString())); String dtCorr = dt.ToString("dd/MM/yyyy"); txtData.Text = dtCorr.ToString(); celular.Text = cripto.Decrypt(dv.Table.Rows[0]["cel_usu"].ToString()); rg.Text = cripto.Decrypt(dv.Table.Rows[0]["rg_usu"].ToString()); cpf.Text = cripto.Decrypt(dv.Table.Rows[0]["cpf_usu"].ToString()); cep.Text = cripto.Decrypt(dv.Table.Rows[0]["cep_usu"].ToString()); txtEmail.Text = cripto.Decrypt(dv.Table.Rows[0]["email_usu"].ToString()); txtNome.Text = cripto.Decrypt(dv.Table.Rows[0]["nome_usu"].ToString()); Image1.ImageUrl = "~\\img\\uploaded\\" + cripto.Decrypt(dv.Table.Rows[0]["img_usu"].ToString()); txtNumCasa.Text = cripto.Decrypt(dv.Table.Rows[0]["numcasa_usu"].ToString()); txtCompl.Text = cripto.Decrypt(dv.Table.Rows[0]["compl_usu"].ToString()); if (cripto.Decrypt(dv.Table.Rows[0]["sx_usu"].ToString()) == "m") { ddlSexo.SelectedIndex = 1; } if (cripto.Decrypt(dv.Table.Rows[0]["sx_usu"].ToString()) == "f") { ddlSexo.SelectedIndex = 2; } if (cripto.Decrypt(dv.Table.Rows[0]["sx_usu"].ToString()) == "o") { ddlSexo.SelectedIndex = 3; } DataView dvPgto = (DataView)sqlFPgto.Select(DataSourceSelectArguments.Empty); if(dvPgto.Table.Rows.Count == 0) { lblFPgto.Text = "Nenhuma forma de pagamento."; btnFPgto.BackColor = Color.Cyan; btnFPgto.Text = "ADICIONAR UMA FORMA DE PAGAMENTO"; Session["fpgto"] = "0"; } else { var numCard = cripto.Decrypt(dvPgto.Table.Rows[0]["numcartao_pgto"].ToString()); var last4 = numCard.Substring(numCard.Length-4,4); String fpgto = "<b>" + cripto.Decrypt(dvPgto.Table.Rows[0]["cartao_pgto"].ToString()) + "</b>" + " - ..." + last4.ToString(); Session["idFPgto"] = dvPgto.Table.Rows[0]["id_pgto"].ToString(); lblFPgto.Text = fpgto; btnFPgto.BackColor = Color.Gray; btnFPgto.Text = "REMOVER"; Session["fpgto"] = "1"; } clean(); lblResp.ForeColor = Color.Empty; lblResp.Text = string.Empty; Session["senhaOK"] = "0"; Session["confSenha"] = "0"; } verif_CEP(); Contador.click = 0; } catch{lblResp.ForeColor = Color.Red;lblResp.Font.Bold = true;lblResp.Text = "ALGUM ERRO OCORREU, TENTE NOVAMENTE";} } protected void btnAlterar_Click(object sender, EventArgs e) { if (txtNome.Text == string.Empty || txtData.Text == string.Empty || rg.Text == string.Empty || cpf.Text == string.Empty || cep.Text == string.Empty || ddlSexo.SelectedIndex == 0 || txtNumCasa.Text == string.Empty || txtEmail.Text == string.Empty || celular.Text == string.Empty) { if (txtNome.Text == string.Empty) { txtNome.BorderColor = Color.Red; } else { txtNome.BorderColor = Color.Empty; } if (txtData.Text == string.Empty) { txtData.BorderColor = Color.Red; } else { txtData.BorderColor = Color.Empty; } if (rg.Text == string.Empty) { rg.BorderColor = Color.Red; } else { rg.BorderColor = Color.Empty; } if (cpf.Text == string.Empty) { cpf.BorderColor = Color.Red; } else { cpf.BorderColor = Color.Empty; } if (cep.Text == string.Empty) { cep.BorderColor = Color.Red; } else { cep.BorderColor = Color.Empty; } if (ddlSexo.SelectedIndex == 0) { ddlSexo.BorderColor = Color.DarkRed; } else { ddlSexo.BorderColor = Color.Empty; } if (txtNumCasa.Text == string.Empty) { txtNumCasa.BorderColor = Color.Red; } else { txtNumCasa.BorderColor = Color.Empty; } if (txtEmail.Text == string.Empty) { txtEmail.BorderColor = Color.Red; } else { txtEmail.BorderColor = Color.Empty; } if (celular.Text == string.Empty) { celular.BorderColor = Color.Red; } else { celular.BorderColor = Color.Empty; } lblResp.Text = "COMPLETAR AS INFORMAÇÕES BÁSICAS EM VERMELHO!"; } else { if (txtDigSenha.Text == string.Empty) { clean(); lblErroDigSenha.Text = "DIGITE SUA SENHA ATUAL!"; txtDigSenha.BorderColor = Color.Red; } else if (Session["confSenha"].ToString()=="0" && txtSenha.Text!=string.Empty && txtConfSenha.Text!=string.Empty){lblResp.Text="VERIFIQUE A FORÇA DA SENHA!";btnForca.Text="ERRO!";btnForca.BackColor=Color.Gray;} else { alterar(); } } } void clean() { txtNome.BorderColor = Color.Empty; ddlSexo.BorderColor = Color.Empty; rg.BorderColor = Color.Empty; cep.BorderColor = Color.Empty; txtData.BorderColor = Color.Empty; txtNumCasa.BorderColor = Color.Empty; celular.BorderColor = Color.Empty; btnForca.Text = "Força"; btnForca.BackColor = Color.Cyan; txtSenha.BorderColor = Color.Empty; txtConfSenha.BorderColor = Color.Empty; } void alterar() { sqlUsuario.SelectParameters["EMAIL"].DefaultValue = Session["emailusu"].ToString(); DataView dv = (DataView)sqlUsuario.Select(DataSourceSelectArguments.Empty); if (txtDigSenha.Text != cripto.Decrypt(dv.Table.Rows[0]["senha_usu"].ToString())) { txtDigSenha.BorderColor = Color.Red; lblErroDigSenha.Text = "SENHA INCORRETA!"; } else { if (ddlSexo.SelectedIndex == 0) { lblResp.Text = "SELECIONE UM SEXO VÁLIDO!"; } if (ddlSexo.SelectedIndex == 1) { sqlUsuario.UpdateParameters["sexo"].DefaultValue = cripto.Encrypt("m"); } if (ddlSexo.SelectedIndex == 2) { sqlUsuario.UpdateParameters["sexo"].DefaultValue = cripto.Encrypt("f"); } if (ddlSexo.SelectedIndex == 3) { sqlUsuario.UpdateParameters["sexo"].DefaultValue = cripto.Encrypt("o"); } if (Session["confSenha"].ToString() == "0" && txtSenha.Text == string.Empty && txtConfSenha.Text == string.Empty) { Session["PARAsenha"] = cripto.Decrypt(dv.Table.Rows[0]["senha_usu"].ToString()); Session["senhaEmail"] = cripto.Decrypt(dv.Table.Rows[0]["senha_usu"].ToString()); sqlUsuario.UpdateParameters["senha"].DefaultValue = dv.Table.Rows[0]["senha_usu"].ToString(); } else { Session["PARAsenha"] = Session["senhaPara"].ToString(); Session["senhaEmail"] =Session["senhaPara"].ToString(); sqlUsuario.UpdateParameters["senha"].DefaultValue = cripto.Encrypt(Session["senhaPara"].ToString()); } try { DateTime dt = Convert.ToDateTime(txtData.Text); DateTime dtnow = DateTime.Now; int anoMin = dtnow.Year - 16; int anoMax = dtnow.Year - 100; if (dt.Year >= anoMax && dt.Year <= anoMin) { if (txtCompl.Text == string.Empty) { sqlUsuario.UpdateParameters["compl"].DefaultValue = cripto.Encrypt("SEM COMPLEMENTO"); } else { sqlUsuario.UpdateParameters["compl"].DefaultValue = cripto.Encrypt(txtCompl.Text); } string nomeArq, urlBD; nomeArq = Path.GetFileName(img.FileName); if (nomeArq != "") { img.SaveAs(Server.MapPath("~\\img\\uploaded\\" + nomeArq)); urlBD = cripto.Encrypt(nomeArq); } else { urlBD = dv.Table.Rows[0]["img_usu"].ToString(); } sqlUsuario.UpdateParameters["img"].DefaultValue = urlBD; sqlUsuario.UpdateParameters["nome"].DefaultValue = cripto.Encrypt(txtNome.Text); sqlUsuario.UpdateParameters["rg"].DefaultValue = cripto.Encrypt(rg.Text); sqlUsuario.UpdateParameters["cpf"].DefaultValue = cripto.Encrypt(cpf.Text); sqlUsuario.UpdateParameters["cep"].DefaultValue = cripto.Encrypt(cep.Text); sqlUsuario.UpdateParameters["emailUsu"].DefaultValue = cripto.Encrypt(txtEmail.Text); sqlUsuario.UpdateParameters["num"].DefaultValue = cripto.Encrypt(txtNumCasa.Text); sqlUsuario.UpdateParameters["dt"].DefaultValue = cripto.Encrypt(dt.ToShortDateString()); sqlUsuario.UpdateParameters["fone"].DefaultValue = cripto.Encrypt(celular.Text); ALTaud_usu(); sqlUsuario.Update(); sqlUsuario.Insert(); try { Email.alteraPerfil(txtEmail.Text, txtNome.Text, txtEmail.Text, Session["senhaEmail"].ToString()); } catch { } Session["emailusu"] = cripto.Encrypt(txtEmail.Text); lblResp.ForeColor = Color.Cyan; lblResp.Font.Bold = true; lblResp.Text = "INFORMAÇÕES ALTERADAS!"; lblErroDigSenha.Text = string.Empty; txtDigSenha.BorderColor = Color.Empty; clean(); } else if (dt.Year >= anoMin) { txtData.BorderColor = Color.Red; lblResp.Text = "CADASTRO PERMITIDO SOMENTE ACIMA DE 16 ANOS."; } else if (dt.Year <= anoMax) { txtData.BorderColor = Color.Red; lblResp.Text = "VERIFIQUE SUA DATA DE NASCIMENTO"; } } catch { txtNome.BorderColor = Color.Empty; txtData.BorderColor = Color.Red; lblResp.Text = "INSIRA DATA CORRETA!"; } } } protected void btnOK_Click(object sender, EventArgs e) { verif_CEP(); } void verif_CEP() { ServiceReference1.AtendeClienteClient ws = new ServiceReference1.AtendeClienteClient("AtendeClientePort"); try { var dados = ws.consultaCEP(cep.Text); if (dados != null) { lblUf.Text = string.Format(@"UF: {0}", dados.uf); lblCidade.Text = string.Format(@"CIDADE: {0}", dados.cidade); lblBairro.Text = string.Format(@"BAIRRO: {0}", dados.bairro); lblRua.Font.Bold = false; lblRua.ForeColor = Color.Empty; lblRua.Text = string.Format(@"RUA: {0}", dados.end); cep.BorderColor = Color.Empty; } else { lblUf.Text = string.Empty; lblCidade.Text = string.Empty; lblBairro.Text = string.Empty; cep.BorderColor = Color.Red; lblRua.ForeColor = Color.Red; lblRua.Font.Bold = true; lblRua.Text = "CEP NÃO ENCONTRADO!"; } } catch { lblUf.Text = string.Empty; lblCidade.Text = string.Empty; lblBairro.Text = string.Empty; cep.BorderColor = Color.Red; lblRua.ForeColor = Color.Red; lblRua.Font.Bold = true; lblRua.Text = "CEP INVÁLIDO/NÃO ENCONTRADO OU INDISPONÍVEL NO MOMENTO!"; } } protected void btnExcluir_Click(object sender, EventArgs e) { sqlUsuario.SelectParameters["EMAIL"].DefaultValue = Session["emailusu"].ToString(); DataView dv = (DataView)sqlUsuario.Select(DataSourceSelectArguments.Empty); if (txtDigSenha.Text == string.Empty) { txtDigSenha.BorderColor = Color.Red; lblErroDigSenha.Text = "DIGITE SUA SENHA E CLIQUE EM DESATIVAR PERFIL NOVAMENTE."; } else { if (txtDigSenha.Text != cripto.Decrypt(dv.Table.Rows[0]["senha_usu"].ToString())) { txtDigSenha.BorderColor = Color.Red; lblErroDigSenha.Text = "SENHA INCORRETA!"; } else { sqlVerCpfUsuario.Update(); DELaud_usu(); sqlUsuario.Insert(); Email.desativaPerfil(cripto.Decrypt(dv.Table.Rows[0]["email_usu"].ToString()), cripto.Decrypt(dv.Table.Rows[0]["nome_usu"].ToString())); Session.Abandon(); Response.Redirect("Default.aspx"); } } } protected void btnForca_Click(object sender, EventArgs e) { if (txtSenha.Text == txtConfSenha.Text) { Session["confSenha"] = "1"; switch (verify(txtSenha.Text)) { case 0: btnForca.BackColor = Color.Red; btnForca.Text = "FRACO!"; lblSaved.Visible = false; Session["senhaOK"] = "0"; lblResp.Text = "SUA SENHA DEVE TER LETRAS (MAIÚSCULAS E MINÚSCULAS), NÚMEROS E CARACTERES ESPECIAIS (!@#$%&*-_)."; break; case 1: btnForca.BackColor = Color.Gold; btnForca.Text = "MÉDIO!"; Session["senhaPara"] = txtSenha.Text; lblSaved.Visible = true; txtSenha.Enabled = false; txtConfSenha.Enabled = false; Session["senhaOK"] = "1"; lblResp.Text = string.Empty; break; case 2: btnForca.BackColor = Color.Lime; btnForca.Text = "FORTE!"; Session["senhaPara"] = txtSenha.Text; lblSaved.Visible = true; txtSenha.Enabled = false; txtConfSenha.Enabled = false; Session["senhaOK"] = "1"; lblResp.Text = string.Empty; break; case 3: btnForca.BackColor = Color.Gray; btnForca.Text = "INCORRETO!"; lblSaved.Visible = false; Session["senhaOK"] = "0"; lblResp.Text = "SUA SENHA DEVE POSSUIR NO MINÍMO 8 CARACTERES!"; break; } } else { Session["confSenha"] = "0"; btnForca.BackColor = Color.Gray; btnForca.Text = "INCORRETO!"; lblResp.Text = "AS SENHAS NÃO CORRESPONDEM!"; } } private int verify(String senha) { int nChar = senha.Length; if (nChar >= 8) { int sim = 0, num = 0, big = 0, small = 0, forca = 0; for (int i = 0; i < nChar; i++) { char atual = senha[i]; if (char.IsNumber(atual)) num++; else if (char.IsUpper(atual)) big++; else if (char.IsLower(atual)) small++; else if (!char.IsWhiteSpace(atual)) sim++; } if (sim != 0) forca++; if (num != 0) forca++; if (big != 0) forca++; if (small != 0) forca++; if (forca <= 2) return 0; else if (forca == 3) return 1; else return 2; } else return 3; } private void ALTaud_usu() { sqlUsuario.InsertParameters["id"].DefaultValue = Session["getIdUsu"].ToString(); sqlUsuario.InsertParameters["table"].DefaultValue = "usuario"; sqlUsuario.InsertParameters["desc"].DefaultValue = "Alterou a conta"; string hr = DateTime.Now.Hour.ToString() + ":" + DateTime.Now.Minute.ToString("0#"); sqlUsuario.InsertParameters["hr"].DefaultValue = hr; string data = DateTime.Now.Date.ToShortDateString(); sqlUsuario.InsertParameters["data"].DefaultValue = data; } private void DELaud_usu() { sqlUsuario.InsertParameters["id"].DefaultValue = Session["getIdUsu"].ToString(); sqlUsuario.InsertParameters["table"].DefaultValue = "usuario"; sqlUsuario.InsertParameters["desc"].DefaultValue = "Desativou a conta"; string hr = DateTime.Now.Hour.ToString() + ":" + DateTime.Now.Minute.ToString("0#"); sqlUsuario.InsertParameters["hr"].DefaultValue = hr; string data = DateTime.Now.Date.ToShortDateString(); sqlUsuario.InsertParameters["data"].DefaultValue = data; } private void FPGTOaud_usu() { sqlUsuario.InsertParameters["id"].DefaultValue = Session["getIdUsu"].ToString(); sqlUsuario.InsertParameters["table"].DefaultValue = "fpgto"; sqlUsuario.InsertParameters["desc"].DefaultValue = "Removeu a Forma de Pagamento"; string hr = DateTime.Now.Hour.ToString() + ":" + DateTime.Now.Minute.ToString("0#"); sqlUsuario.InsertParameters["hr"].DefaultValue = hr; string data = DateTime.Now.Date.ToShortDateString(); sqlUsuario.InsertParameters["data"].DefaultValue = data; } protected void btnFPgto_Click(object sender, EventArgs e) { if (Session["fpgto"].ToString() == "0") { Response.Redirect("usuarioFPgto.aspx"); } else { FPGTOaud_usu(); sqlUsuario.Insert(); sqlFPgto.Update(); Response.Redirect(Request.RawUrl); } } }