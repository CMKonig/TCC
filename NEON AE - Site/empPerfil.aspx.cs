using System;using System.Collections.Generic;using System.Linq;using System.Web;using System.Web.UI;using System.Web.UI.WebControls;using System.Data;using System.Drawing;using System.IO; public partial class empPerfil : System.Web.UI.Page { Criptografia cripto = new Criptografia("NEON"); ServiceReference1.AtendeClienteClient ws; protected void Page_Load(object sender, EventArgs e) { try { if (!IsPostBack) { DataView dv = (DataView)sqlEmp.Select(DataSourceSelectArguments.Empty); celular.Text = cripto.Decrypt(dv.Table.Rows[0]["cel_emp"].ToString()); cep.Text = cripto.Decrypt(dv.Table.Rows[0]["cep_emp"].ToString()); txtEmail.Text = cripto.Decrypt(dv.Table.Rows[0]["email_emp"].ToString()); txtNome.Text = cripto.Decrypt(dv.Table.Rows[0]["nome_emp"].ToString()); Image1.ImageUrl = "~\\img\\uploaded\\" + cripto.Decrypt(dv.Table.Rows[0]["img_emp"].ToString()); txtNumCasa.Text = cripto.Decrypt(dv.Table.Rows[0]["numlocal_emp"].ToString()); txtCompl.Text = cripto.Decrypt(dv.Table.Rows[0]["compl_emp"].ToString()); telefone.Text = cripto.Decrypt(dv.Table.Rows[0]["fone_emp"].ToString()); txtRespon.Text = cripto.Decrypt(dv.Table.Rows[0]["responsavel_emp"].ToString()); cnpj.Text = cripto.Decrypt(dv.Table.Rows[0]["cnpj_emp"].ToString()); clean(); verif_CEP(); Session["senhaOK"] = "0"; Session["confSenha"] = "0"; Session["senhaPara"] = string.Empty; } } catch { lblResp.ForeColor = Color.Red; lblResp.Font.Bold = true; lblResp.Text = "ERRO! TENTE NOVAMENTE MAIS TARDE."; Email.erro("empPerfil.aspx"); } } void clean(){txtNome.BorderColor = Color.Empty;txtEmail.BorderColor = Color.Empty;cep.BorderColor = Color.Empty;cnpj.BorderColor = Color.Empty;txtNumCasa.BorderColor = Color.Empty;celular.BorderColor = Color.Empty;telefone.BorderColor = Color.Empty;txtRespon.BorderColor = Color.Empty;} protected void btnAlterar_Click(object sender, EventArgs e) { try { if (txtNome.Text == string.Empty || cnpj.Text == string.Empty || telefone.Text == string.Empty || cep.Text == string.Empty || txtRespon.Text == string.Empty || txtNumCasa.Text == string.Empty || txtEmail.Text == string.Empty || celular.Text == string.Empty) { if (txtNome.Text == string.Empty) txtNome.BorderColor = Color.Red; else txtNome.BorderColor = Color.Empty; if (txtRespon.Text == string.Empty) txtRespon.BorderColor = Color.Red; else txtRespon.BorderColor = Color.Empty; if (cnpj.Text == string.Empty) cnpj.BorderColor = Color.Red; else cnpj.BorderColor = Color.Empty; if (cep.Text == string.Empty) cep.BorderColor = Color.Red; else cep.BorderColor = Color.Empty; if (txtNumCasa.Text == string.Empty) txtNumCasa.BorderColor = Color.Red; else txtNumCasa.BorderColor = Color.Empty; if (txtEmail.Text == string.Empty) txtEmail.BorderColor = Color.Red; else txtEmail.BorderColor = Color.Empty; if (celular.Text == string.Empty) celular.BorderColor = Color.Red; else celular.BorderColor = Color.Empty; if (telefone.Text == string.Empty) telefone.BorderColor = Color.Red; else telefone.BorderColor = Color.Empty; lblResp.ForeColor = Color.Red; lblResp.Text = "COMPLETAR AS INFORMAÇÕES EM VERMELHO!"; } else { if (txtDigSenha.Text == string.Empty) { if (txtSenha.Text == string.Empty && txtConfSenha.Text == string.Empty) { clean(); lblErroDigSenha.ForeColor = Color.Red; lblErroDigSenha.Text = "DIGITE SUA SENHA ATUAL!"; txtDigSenha.BorderColor = Color.Red; } } else { compl(); if (Session["confSenha"].ToString() == "1" && txtSenha.Text != string.Empty) post_alt(); else if (txtSenha.Text == string.Empty) post_alt(); else { lblResp.ForeColor = Color.Red; lblResp.Text = "CLIQUE EM FORÇA!"; txtSenha.BorderColor = Color.Red; txtConfSenha.BorderColor = Color.Red; } } } } catch { Email.erro("empPerfil.aspx"); lblErroDigSenha.ForeColor = Color.Red; lblErroDigSenha.Text = "ERRO! TENTE NOVAMENTE MAIS TARDE."; } } void compl(){if (txtCompl.Text == string.Empty)sqlEmp.UpdateParameters["compl"].DefaultValue = cripto.Encrypt("Sem Complemento");else sqlEmp.UpdateParameters["compl"].DefaultValue = cripto.Encrypt(txtCompl.Text);} void alterar() { DataView dv = (DataView)sqlEmp.Select(DataSourceSelectArguments.Empty); if (cripto.Encrypt(txtDigSenha.Text) != dv.Table.Rows[0]["senha_emp"].ToString()) { txtDigSenha.BorderColor = Color.Red; lblErroDigSenha.Text = "SENHA INCORRETA!"; } else { DataView dv2 = (DataView)sqlEmp.Select(DataSourceSelectArguments.Empty); string nomeArq, urlBD; nomeArq = Path.GetFileName(img.FileName); if (nomeArq != "") { img.SaveAs(Server.MapPath("~\\img\\uploaded\\" + nomeArq)); urlBD = cripto.Encrypt(nomeArq); } else { urlBD = dv2.Table.Rows[0]["img_emp"].ToString(); } sqlEmp.UpdateParameters["IMG"].DefaultValue = urlBD; if (Session["senhaPara"].ToString() != string.Empty && Session["senhaOK"].ToString() == "1") { Session["senhaEmail"] = Session["senhaPara"].ToString(); sqlEmp.UpdateParameters["senha"].DefaultValue = cripto.Encrypt(Session["senhaPara"].ToString()); } else { Session["senhaEmail"] = cripto.Decrypt(dv.Table.Rows[0]["senha_emp"].ToString()); sqlEmp.UpdateParameters["senha"].DefaultValue = dv.Table.Rows[0]["senha_emp"].ToString(); } compl(); sqlEmp.UpdateParameters["emailEmp"].DefaultValue = cripto.Encrypt(txtEmail.Text); sqlEmp.UpdateParameters["NOME"].DefaultValue = cripto.Encrypt(txtNome.Text); sqlEmp.UpdateParameters["NOMERESP"].DefaultValue = cripto.Encrypt(txtRespon.Text); sqlEmp.UpdateParameters["num"].DefaultValue = cripto.Encrypt(txtNumCasa.Text); sqlEmp.UpdateParameters["CELULAR"].DefaultValue = cripto.Encrypt(celular.Text); sqlEmp.UpdateParameters["CEP"].DefaultValue = cripto.Encrypt(cep.Text); sqlEmp.UpdateParameters["cnpj"].DefaultValue = cripto.Encrypt(cnpj.Text); sqlEmp.UpdateParameters["FONE"].DefaultValue = cripto.Encrypt(telefone.Text); aud_Alt_emp(); sqlAudEmp.Insert(); sqlEmp.Update(); Email.alteraPerfil(txtEmail.Text, txtRespon.Text, txtEmail.Text, Session["senhaEmail"].ToString()); Session["empresa"] = cripto.Encrypt(txtEmail.Text); lblResp.ForeColor = Color.Cyan; lblResp.Font.Bold = true; lblResp.Text = "INFORMAÇÕES ALTERADAS!"; txtDigSenha.BorderColor = Color.Empty; lblErroDigSenha.Text = string.Empty; } } private void aud_Alt_emp() { sqlAudEmp.InsertParameters["id"].DefaultValue = Session["idEmp"].ToString(); sqlAudEmp.InsertParameters["table"].DefaultValue = "cliente_emp"; sqlAudEmp.InsertParameters["desc"].DefaultValue = "Alterou a conta"; string hr = DateTime.Now.Hour.ToString() + ":" + DateTime.Now.Minute.ToString("0#"); sqlAudEmp.InsertParameters["hr"].DefaultValue = hr; string data = DateTime.Now.Date.ToShortDateString(); sqlAudEmp.InsertParameters["data"].DefaultValue = data; } private void aud_Des_emp() { sqlAudEmp.InsertParameters["id"].DefaultValue = Session["idEmp"].ToString(); sqlAudEmp.InsertParameters["table"].DefaultValue = "cliente_emp"; sqlAudEmp.InsertParameters["desc"].DefaultValue = "Desativou a conta"; string hr = DateTime.Now.Hour.ToString() + ":" + DateTime.Now.Minute.ToString("0#"); sqlAudEmp.InsertParameters["hr"].DefaultValue = hr; string data = DateTime.Now.Date.ToShortDateString(); sqlAudEmp.InsertParameters["data"].DefaultValue = data; } void post_alt(){alterar();clean();txtSenha.BorderColor = Color.Empty;txtConfSenha.BorderColor = Color.Empty;btnForca.Text = "Força";btnForca.BackColor = Color.Cyan;} protected void btnOK_Click(object sender, EventArgs e){verif_CEP();} void verif_CEP() { try { ws = new ServiceReference1.AtendeClienteClient("AtendeClientePort"); var dados = ws.consultaCEP(cep.Text); if (dados != null) { lblUf.ForeColor = Color.Empty; lblUf.Font.Bold = false; lblUf.Text = string.Format(@"UF: {0}", dados.uf); lblCidade.Text = string.Format(@"CIDADE: {0}", dados.cidade); lblBairro.Text = string.Format(@"BAIRRO: {0}", dados.bairro); lblRua.Text = string.Format(@"RUA: {0}", dados.end); cep.BorderColor = Color.Empty; } else { lblCidade.Text = string.Empty; lblBairro.Text = string.Empty; lblRua.Text = string.Empty; cep.Text = string.Empty; cep.BorderColor = Color.Red; lblUf.ForeColor = Color.Red; lblUf.Font.Bold = true; lblUf.Text = "CEP NÃO ENCONTRADO!"; } } catch { lblCidade.Text = string.Empty; lblBairro.Text = string.Empty; lblRua.Text = string.Empty; cep.Text = string.Empty; cep.BorderColor = Color.Red; lblUf.ForeColor = Color.Red; lblUf.Font.Bold = true; lblUf.Text = "CEP INVÁLIDO!"; } } protected void btnExcluir_Click(object sender, EventArgs e) { try { DataView dv = (DataView)sqlEmp.Select(DataSourceSelectArguments.Empty); if (txtDigSenha.Text == string.Empty) { txtDigSenha.BorderColor = Color.Red; lblResp.ForeColor = Color.Red; lblResp.Text = "DIGITE SUA SENHA NO CAMPO EM VERMELHO PARA CONFIRMAR A EXCLUSÃO DO SEU PERFIL."; } else { if (txtDigSenha.Text != cripto.Decrypt(dv.Table.Rows[0]["senha_emp"].ToString())) { txtDigSenha.BorderColor = Color.Red; lblErroDigSenha.Text = "SENHA INCORRETA!"; } else { sqlVerCnpj.Update(); aud_Des_emp(); sqlAudEmp.Insert(); sqlVerEmailEmp.Update(); Email.desativaPerfil(cripto.Decrypt(dv.Table.Rows[0]["email_emp"].ToString()), cripto.Decrypt(dv.Table.Rows[0]["responsavel_emp"].ToString())); Session.Abandon(); Response.Redirect("Default.aspx"); } } } catch (System.Data.SqlClient.SqlException) { Email.erro("empPerfil.aspx"); lblResp.Text = "ERRO! TENTE NOVAMENTE MAIS TARDE."; } } protected void btnForca_Click(object sender, EventArgs e) { if (txtSenha.Text == txtConfSenha.Text) { Session["confSenha"] = "1"; switch (verify(txtSenha.Text)) { case 0: btnForca.BackColor = Color.Red; btnForca.Text = "FRACO!"; lblSaved.Visible = false; Session["senhaOK"] = "0"; lblResp.Text = "SUA SENHA DEVE TER LETRAS, NÚMEROS E CARACTERES ESPECIAIS."; break; case 1: btnForca.BackColor = Color.Gold; btnForca.Text = "MÉDIO!"; Session["senhaPara"] = txtSenha.Text; lblSaved.Visible = true; txtSenha.Enabled = false; txtConfSenha.Enabled = false; Session["senhaOK"] = "1"; lblResp.Text = string.Empty; break; case 2: btnForca.BackColor = Color.Lime; btnForca.Text = "FORTE!"; Session["senhaPara"] = txtSenha.Text; lblSaved.Visible = true; txtSenha.Enabled = false; txtConfSenha.Enabled = false; Session["senhaOK"] = "1"; lblResp.Text = string.Empty; break; case 3: btnForca.BackColor = Color.Gray; btnForca.Text = "INCORRETO!"; lblSaved.Visible = false; Session["senhaOK"] = "0"; lblResp.Text = "SUA SENHA DEVE POSSUIR NO MINÍMO 8 CARACTERES!"; break; } } else { Session["confSenha"] = "0"; btnForca.BackColor = Color.Gray; btnForca.Text = "INCORRETO!"; lblResp.Text = "AS SENHAS NÃO CORRESPONDEM!"; } } private int verify(String senha) { int nChar = senha.Length; if (nChar >= 8) { int sim = 0, num = 0, big = 0, small = 0, forca = 0; for (int i = 0; i < nChar; i++) { char atual = senha[i]; if (char.IsNumber(atual)) num++; else if (char.IsUpper(atual)) big++; else if (char.IsLower(atual)) small++; else if (!char.IsWhiteSpace(atual)) sim++; } if (sim != 0) forca++; if (num != 0) forca++; if (big != 0) forca++; if (small != 0) forca++; if (forca <= 2) return 0; else if (forca == 3) return 1; else return 2; } else return 3; } }