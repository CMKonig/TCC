using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.UI; using System.Web.UI.WebControls; using System.Drawing; using System.Data; using System.IO; public partial class CadastroUsuario : System.Web.UI.Page { Criptografia cripto = new Criptografia("NEON"); protected void Page_Load(object sender, EventArgs e) { if (IsPostBack) { if (ddlSexo.SelectedIndex == 1) { sqlCadastrarUsuario.InsertParameters["sx"].DefaultValue = cripto.Encrypt("m"); } if (ddlSexo.SelectedIndex == 2) { sqlCadastrarUsuario.InsertParameters["sx"].DefaultValue = cripto.Encrypt("f"); } if (ddlSexo.SelectedIndex == 3) { sqlCadastrarUsuario.InsertParameters["sx"].DefaultValue = cripto.Encrypt("o"); } } if (!IsPostBack) { Session["senhaOK"] = "0"; Session["confSenha"] = "0"; } } protected void btnCadastrar_Click(object sender, EventArgs e) { try { if (txtNome.Text == string.Empty || txtData.Text == string.Empty || rg.Text == string.Empty || cpf.Text == string.Empty || cep.Text == string.Empty || ddlSexo.SelectedIndex == 0 || txtNumCasa.Text == string.Empty || txtEmail.Text == string.Empty || txtSenha.Text == string.Empty && Session["confSenha"].ToString() == "0") { if (txtNome.Text == String.Empty) txtNome.BorderColor = Color.Red; else txtNome.BorderColor = Color.Empty; if (txtData.Text == string.Empty) txtData.BorderColor = Color.Red; else txtData.BorderColor = Color.Empty; if (rg.Text == string.Empty) rg.BorderColor = Color.Red; else rg.BorderColor = Color.Empty; if (cpf.Text == string.Empty) cpf.BorderColor = Color.Red; else cpf.BorderColor = Color.Empty; if (cep.Text == string.Empty) cep.BorderColor = Color.Red; else cep.BorderColor = Color.Empty; if (ddlSexo.SelectedIndex == 0) ddlSexo.BorderColor = Color.DarkRed; else ddlSexo.BorderColor = Color.Empty; if (txtNumCasa.Text == string.Empty) txtNumCasa.BorderColor = Color.Red; else txtNumCasa.BorderColor = Color.Empty; lblErro.Text = "COMPLETAR AS INFORMAÇÕES BÁSICAS!"; if (txtNome.Text != string.Empty && txtNumCasa.Text != string.Empty && cep.Text != string.Empty && rg.Text != string.Empty && cpf.Text != string.Empty && ddlSexo.SelectedIndex > 0) lblErro.Text = string.Empty; if (txtEmail.Text == string.Empty || txtSenha.Text == string.Empty && Session["confSenha"].ToString() == "0" || txtSenha.Text == string.Empty && Session["confSenha"].ToString() == "0" && txtEmail.Text == string.Empty) { if (txtEmail.Text == string.Empty) txtEmail.BorderColor = Color.Red; else txtEmail.BorderColor = Color.Empty; if (txtSenha.Text == string.Empty) txtSenha.BorderColor = Color.Red; else txtSenha.BorderColor = Color.Empty; lblErroConta.Text = "COMPLETE AS INFORMAÇÕES DA CONTA!"; } else { lblErroConta.Text = string.Empty; } } else { try { Convert.ToDateTime(txtData.Text); txtData.BorderColor = Color.Empty; lblErro.Text = string.Empty; DateTime dt = Convert.ToDateTime(txtData.Text); DateTime dtnow = DateTime.Now; int anoMin = dtnow.Year - 16; int anoMax = dtnow.Year - 100; if (dt.Year >= anoMax && dt.Year <= anoMin) { if (txtSenha.Text == string.Empty && txtConfirSenha.Text == string.Empty && Session["confSenha"].ToString() == "0") { clean(); lblErroConta.Text = "DIGITE A SENHA E A CONFIRMAÇÃO DE SENHA!"; txtSenha.BorderColor = Color.Red; txtConfirSenha.BorderColor = Color.Red; } else if (Session["senhaOK"].ToString() == "0") { lblErroConta.Text = "VERIFIQUE A FORÇA DA SENHA!"; } else { if (Session["confSenha"].ToString() == "1") { if (txtCompl.Text == string.Empty)sqlCadastrarUsuario.InsertParameters["compl"].DefaultValue = cripto.Encrypt("SEM COMPLEMENTO"); else sqlCadastrarUsuario.InsertParameters["compl"].DefaultValue = cripto.Encrypt(txtCompl.Text); sqlVerEmailUsuario.SelectParameters["emailex"].DefaultValue = cripto.Encrypt(txtEmail.Text); DataView dvVerEmail = (DataView)sqlVerEmailUsuario.Select(DataSourceSelectArguments.Empty); int qtdEmail = Convert.ToInt32(dvVerEmail.Table.Rows[0]["qtdEmail"].ToString()); sqlVerCpf.SelectParameters["cpf"].DefaultValue = cripto.Encrypt(cpf.Text); DataView dvVerCpf = (DataView)sqlVerCpf.Select(DataSourceSelectArguments.Empty); int qtdCpf = Convert.ToInt32(dvVerCpf.Table.Rows[0]["qtdCpf"].ToString()); if (qtdEmail != 0 || qtdCpf != 0 || qtdEmail != 0 && qtdCpf != 0) { if (qtdEmail != 0) { lblErro.Text = string.Empty; lblErroConta.Text = "EMAIL JÁ CADASTRADO!"; clean(); txtEmail.BorderColor = Color.Red; txtSenha.BorderColor = Color.Empty; txtConfirSenha.BorderColor = Color.Empty; } if (qtdCpf != 0) { lblErroConta.Text = string.Empty; lblErro.Text = "CPF JÁ CADASTRADO!"; clean(); cpf.BorderColor = Color.Red; txtSenha.BorderColor = Color.Empty; txtConfirSenha.BorderColor = Color.Empty; } if (qtdCpf != 0 && qtdEmail != 0) { lblErroConta.Text = string.Empty; lblErro.Text = "EMAIL E CPF JÁ CADASTRADOS!"; clean(); txtEmail.BorderColor = Color.Red; cpf.BorderColor = Color.Red; txtSenha.BorderColor = Color.Empty; txtConfirSenha.BorderColor = Color.Empty; } } else { string nomeArq, urlBD; nomeArq = Path.GetFileName(FileUpload1.FileName); if (nomeArq != "") { FileUpload1.SaveAs(Server.MapPath("~\\img\\uploaded\\" + nomeArq)); urlBD = nomeArq; } else urlBD = "USER_PATTERN.png"; sqlCadastrarUsuario.InsertParameters["img"].DefaultValue = cripto.Encrypt(urlBD); sqlCadastrarUsuario.InsertParameters["nome"].DefaultValue = cripto.Encrypt(txtNome.Text); sqlCadastrarUsuario.InsertParameters["dt"].DefaultValue = cripto.Encrypt(txtData.Text); sqlCadastrarUsuario.InsertParameters["fone"].DefaultValue = cripto.Encrypt(celular.Text); sqlCadastrarUsuario.InsertParameters["num"].DefaultValue = cripto.Encrypt(txtNumCasa.Text); sqlCadastrarUsuario.InsertParameters["email"].DefaultValue = cripto.Encrypt(txtEmail.Text); sqlCadastrarUsuario.InsertParameters["senha"].DefaultValue = cripto.Encrypt(Session["senhaPara"].ToString()); sqlCadastrarUsuario.InsertParameters["rg"].DefaultValue = cripto.Encrypt(rg.Text); sqlCadastrarUsuario.InsertParameters["cpf"].DefaultValue = cripto.Encrypt(cpf.Text); sqlCadastrarUsuario.InsertParameters["cep"].DefaultValue = cripto.Encrypt(cep.Text); aud_usu(); sqlCadastrarUsuario.Insert(); sqlVerEmailUsuario.Insert(); Email.cad(txtEmail.Text, txtNome.Text, txtEmail.Text, Session["senhaPara"].ToString()); Response.Redirect("Login.aspx"); } } else { clean(); lblErro.Text = string.Empty; lblErroConta.Text = "AS SENHAS NÃO COINCIDEM!"; txtSenha.BorderColor = Color.Red; txtConfirSenha.BorderColor = Color.Red; } } } else if (dt.Year >= anoMin) { txtData.BorderColor = Color.Red; lblErro.Text = "CADASTRO PERMITIDO SOMENTE ACIMA DE 16 ANOS."; } else if (dt.Year <= anoMax) { txtData.BorderColor = Color.Red; lblErro.Text = "VERIFIQUE SUA DATA DE NASCIMENTO"; } } catch { lblErro.Text = "DATA INVÁLIDA!"; txtData.BorderColor = Color.Red; } } } catch(System.Data.SqlClient.SqlException) { Email.erro("CadastroUsuario.aspx"); lblErro.Text = "ERRO! TENTE NOVAMENTE MAIS TARDE"; } } private void aud_usu() { DataView verQtdUsu = (DataView)sqlCadastrarUsuario.Select(DataSourceSelectArguments.Empty); int qtdUsu = Convert.ToInt32(verQtdUsu.Table.Rows[0]["qtdUsu"].ToString()) + 1; sqlVerEmailUsuario.InsertParameters["id"].DefaultValue = qtdUsu.ToString(); sqlVerEmailUsuario.InsertParameters["table"].DefaultValue = "usuario"; sqlVerEmailUsuario.InsertParameters["desc"].DefaultValue = "Criou a conta"; string hr = DateTime.Now.Hour.ToString() + ":" + DateTime.Now.Minute.ToString("0#"); sqlVerEmailUsuario.InsertParameters["hr"].DefaultValue = hr; string data = DateTime.Now.Date.ToShortDateString(); sqlVerEmailUsuario.InsertParameters["data"].DefaultValue = data; } void clean() { txtNome.BorderColor = Color.Empty; ddlSexo.BorderColor = Color.Empty; txtEmail.BorderColor = Color.Empty; rg.BorderColor = Color.Empty; cep.BorderColor = Color.Empty; cpf.BorderColor = Color.Empty; txtData.BorderColor = Color.Empty; txtNumCasa.BorderColor = Color.Empty; } protected void ddlSexo_SelectedIndexChanged(object sender, EventArgs e) { if (ddlSexo.SelectedIndex == 1) { sqlCadastrarUsuario.InsertParameters["sx"].DefaultValue = cripto.Encrypt("m"); } if (ddlSexo.SelectedIndex == 2) { sqlCadastrarUsuario.InsertParameters["sx"].DefaultValue = cripto.Encrypt("f"); } if (ddlSexo.SelectedIndex == 3) { sqlCadastrarUsuario.InsertParameters["sx"].DefaultValue = cripto.Encrypt("o"); } } protected void btnOK_Click(object sender, EventArgs e) { ServiceReference1.AtendeClienteClient ws = new ServiceReference1.AtendeClienteClient("AtendeClientePort"); try { var dados = ws.consultaCEP(cep.Text); if (dados != null) { lblUf.ForeColor = Color.Empty; lblUf.Font.Bold = false; lblUf.Text = string.Format(@"UF: {0}", dados.uf); lblCidade.Text = string.Format(@"CIDADE: {0}", dados.cidade); lblBairro.Text = string.Format(@"BAIRRO: {0}", dados.bairro); lblRua.Text = string.Format(@"RUA: {0}", dados.end); cep.BorderColor = Color.Empty; } else { lblUf.Text = string.Empty; lblCidade.Text = string.Empty; lblBairro.Text = string.Empty; lblRua.Text = string.Empty; cep.Text = string.Empty; cep.BorderColor = Color.Red; lblUf.ForeColor = Color.Red; lblUf.Font.Bold = true; lblUf.Text = "CEP INVÁLIDO/NÃO ENCONTRADO!"; } } catch { cep.BorderColor = Color.Red; lblUf.ForeColor = Color.Red; lblUf.Font.Bold = true; lblUf.Text = "CEP INVÁLIDO/NÃO ENCONTRADO!"; lblCidade.Text = string.Empty; lblBairro.Text = string.Empty; lblRua.Text = string.Empty; cep.Text = string.Empty; } } protected void btnVerifForca_Click(object sender, EventArgs e) { if (txtSenha.Text == txtConfirSenha.Text) { Session["confSenha"] = "1"; switch (verify(txtSenha.Text)) { case 0:btnVerifForca.BackColor = Color.Red; btnVerifForca.Text = "FRACO!"; lblSaved.Visible = false; Session["senhaOK"] = "0"; lblErroConta.Text = string.Empty; txtSenha.BorderColor = Color.Red; break; case 1:btnVerifForca.BackColor = Color.Gold; btnVerifForca.Text = "MÉDIO!"; Session["senhaPara"] = txtSenha.Text; lblSaved.Visible = true; txtSenha.Enabled = false; txtConfirSenha.Enabled = false; Session["senhaOK"] = "1"; lblErroConta.Text = string.Empty; txtSenha.BorderColor = Color.Empty; break; case 2:btnVerifForca.BackColor = Color.Lime; btnVerifForca.Text = "FORTE!"; Session["senhaPara"] = txtSenha.Text; lblSaved.Visible = true; txtSenha.Enabled = false; txtConfirSenha.Enabled = false; Session["senhaOK"] = "1"; lblErroConta.Text = string.Empty; txtSenha.BorderColor = Color.Empty; break; case 3:btnVerifForca.BackColor = Color.Gray; btnVerifForca.Text = "INCORRETO!"; lblSaved.Visible = false; Session["senhaOK"] = "0"; lblErroConta.Text = "SUA SENHA DEVE POSSUIR NO MINÍMO 8 CARACTERES!"; txtSenha.BorderColor = Color.Red; break; } } else { Session["confSenha"] = "0"; btnVerifForca.BackColor = Color.Gray; btnVerifForca.Text = "INCORRETO!"; lblErroConta.Text = "AS SENHAS NÃO CORRESPONDEM!"; } } private int verify(String senha) { int nChar = senha.Length; if (nChar >= 8) { int sim = 0, num = 0, big = 0, small = 0, forca = 0; for (int i = 0; i < nChar; i++) { char atual = senha[i]; if (char.IsNumber(atual))num++; else if (char.IsUpper(atual))big++; else if (char.IsLower(atual))small++; else if (!char.IsWhiteSpace(atual))sim++; } if (sim != 0)forca++; if (num != 0)forca++; if (big != 0)forca++; if (small != 0)forca++; if (forca <= 2)return 0; else if (forca == 3)return 1; else return 2; } else return 3; } }