using System;using System.Collections.Generic;using System.Linq;using System.Web;using System.Web.UI;using System.Web.UI.WebControls;using System.Drawing;using System.Data;using System.IO; public partial class CadastroEmp : System.Web.UI.Page { Criptografia cripto = new Criptografia("NEON"); protected void Page_Load(object sender, EventArgs e) { if(!IsPostBack){Session["senhaOK"] = "0"; Session["confSenha"] = "0";} } protected void btnCadastrar_Click(object sender, EventArgs e) { try { if (txtNome.Text == string.Empty || txtNomeResp.Text == string.Empty || cnpj.Text == string.Empty|| cep.Text == string.Empty || telefone.Text == string.Empty || celular.Text == string.Empty|| txtNumLocal.Text == string.Empty || txtEmail.Text == string.Empty || txtSenha.Text == string.Empty && Session["confSenha"].ToString() == "0") { if (txtNome.Text == string.Empty) txtNome.BorderColor = Color.Red; else txtNome.BorderColor = Color.Empty; if (txtNomeResp.Text == string.Empty) txtNomeResp.BorderColor = Color.Red; else txtNomeResp.BorderColor = Color.Empty; if (telefone.Text == string.Empty) telefone.BorderColor = Color.Red; else telefone.BorderColor = Color.Empty; if (cnpj.Text == string.Empty) cnpj.BorderColor = Color.Red; else cnpj.BorderColor = Color.Empty; if (cep.Text == string.Empty) cep.BorderColor = Color.Red; else cep.BorderColor = Color.Empty; if (celular.Text == string.Empty) celular.BorderColor = Color.Red; else celular.BorderColor = Color.Empty; if (txtNumLocal.Text == string.Empty) txtNumLocal.BorderColor = Color.Red; else txtNumLocal.BorderColor = Color.Empty; lblErro.Text = "COMPLETAR AS INFORMAÇÕES BÁSICAS!"; if (txtNome.Text != string.Empty && txtNumLocal.Text != string.Empty && cep.Text != string.Empty&& telefone.Text != string.Empty && cnpj.Text != string.Empty && celular.Text != string.Empty && txtNomeResp.Text != string.Empty) lblErro.Text = string.Empty; if (txtEmail.Text == string.Empty || txtSenha.Text == string.Empty && Session["confSenha"].ToString() == "0" || txtSenha.Text == string.Empty && Session["confSenha"].ToString() == "0" && txtEmail.Text == string.Empty) { if (txtEmail.Text == string.Empty) txtEmail.BorderColor = Color.Red; else txtEmail.BorderColor = Color.Empty; if (txtSenha.Text == string.Empty) txtSenha.BorderColor = Color.Red; else txtSenha.BorderColor = Color.Empty; lblErroConta.Text = "COMPLETE AS INFORMAÇÕES DA CONTA!"; } } else { if (txtSenha.Text == string.Empty && txtConfirSenha.Text == string.Empty && Session["confSenha"].ToString() == "0") { clean(); lblErroConta.Text = "DIGITE A SENHA E A CONFIRMAÇÃO DE SENHA!"; txtSenha.BorderColor = Color.Red; txtConfirSenha.BorderColor = Color.Red; } else if (Session["senhaOK"].ToString() == "0")lblErroConta.Text = "VERIFIQUE A FORÇA DA SENHA!"; else { if (Session["confSenha"].ToString() == "1") { String compl; if (txtCompl.Text == string.Empty)compl = "SEM COMPLEMENTO"; else compl = txtCompl.Text; sqlVerEmailEmp.SelectParameters["email"].DefaultValue = cripto.Encrypt(txtEmail.Text); DataView dvVerEmailEmp = (DataView)sqlVerEmailEmp.Select(DataSourceSelectArguments.Empty); int qtdEmail = Convert.ToInt32(dvVerEmailEmp.Table.Rows[0]["qtdEmail"].ToString()); sqlVerCnpj.SelectParameters["cnpj"].DefaultValue = cripto.Encrypt(cnpj.Text); DataView dvVerCnpj = (DataView)sqlVerCnpj.Select(DataSourceSelectArguments.Empty); int qtdCnpj = Convert.ToInt32(dvVerCnpj.Table.Rows[0]["qtdCnpj"].ToString()); if (qtdEmail != 0 || qtdCnpj != 0 || qtdEmail != 0 && qtdCnpj != 0) { if (qtdEmail != 0) { lblErro.Text = string.Empty; lblErroConta.Text = "EMAIL JÁ CADASTRADO!"; clean(); txtEmail.BorderColor = Color.Red; txtSenha.BorderColor = Color.Empty; txtConfirSenha.BorderColor = Color.Empty; } if (qtdCnpj != 0) { lblErroConta.Text = string.Empty; lblErro.Text = "CNPJ JÁ CADASTRADO!"; clean(); cnpj.BorderColor = Color.Red; txtSenha.BorderColor = Color.Empty; txtConfirSenha.BorderColor = Color.Empty; } if (qtdCnpj != 0 && qtdEmail != 0) { lblErroConta.Text = string.Empty; lblErro.Text = "EMAIL E CNPJ JÁ CADASTRADOS!"; clean(); txtEmail.BorderColor = Color.Red; cnpj.BorderColor = Color.Red; txtSenha.BorderColor = Color.Empty; txtConfirSenha.BorderColor = Color.Empty; } } else { string nomeArq, urlBD; nomeArq = Path.GetFileName(FileUpload1.FileName); if (nomeArq != "") { FileUpload1.SaveAs(Server.MapPath("~\\img\\uploaded\\" + nomeArq)); urlBD = nomeArq; } else urlBD = "COMPANY_PATTERN.png"; sqlCadastrarEmp.InsertParameters["imgEmp"].DefaultValue = cripto.Encrypt(urlBD); sqlCadastrarEmp.InsertParameters["nome"].DefaultValue = cripto.Encrypt(txtNome.Text); sqlCadastrarEmp.InsertParameters["resp"].DefaultValue = cripto.Encrypt(txtNomeResp.Text); sqlCadastrarEmp.InsertParameters["num"].DefaultValue = cripto.Encrypt(txtNumLocal.Text); sqlCadastrarEmp.InsertParameters["email"].DefaultValue = cripto.Encrypt(txtEmail.Text); sqlCadastrarEmp.InsertParameters["senha"].DefaultValue = cripto.Encrypt(Session["senhaPara"].ToString()); sqlCadastrarEmp.InsertParameters["cnpj"].DefaultValue = cripto.Encrypt(cnpj.Text); sqlCadastrarEmp.InsertParameters["cep"].DefaultValue = cripto.Encrypt(cep.Text); sqlCadastrarEmp.InsertParameters["cel"].DefaultValue = cripto.Encrypt(celular.Text); sqlCadastrarEmp.InsertParameters["fone"].DefaultValue = cripto.Encrypt(telefone.Text); sqlCadastrarEmp.InsertParameters["compl"].DefaultValue = cripto.Encrypt(compl); aud_emp(); sqlCadastrarEmp.Insert(); sqlVerEmailEmp.Insert(); Email.cad(txtEmail.Text, txtNomeResp.Text, txtEmail.Text, Session["senhaPara"].ToString()); Response.Redirect("Login.aspx"); } } else { clean(); lblErro.Text = string.Empty; lblErroConta.Text = "AS SENHAS NÃO COINCIDEM!"; txtSenha.BorderColor = Color.Red; txtConfirSenha.BorderColor = Color.Red; } } } } catch(System.Data.SqlClient.SqlException) { Email.erro("CadastroEmp.aspx"); lblErro.Text = "ERRO! TENTE NOVAMENTE MAIS TARDE"; } } private void aud_emp() { DataView verQtdEmp = (DataView)sqlCadastrarEmp.Select(DataSourceSelectArguments.Empty); int qtdEmp = Convert.ToInt32(verQtdEmp.Table.Rows[0]["qtdEmp"].ToString()) + 1; sqlVerEmailEmp.InsertParameters["id"].DefaultValue = qtdEmp.ToString(); sqlVerEmailEmp.InsertParameters["table"].DefaultValue = "cliente_emp"; sqlVerEmailEmp.InsertParameters["desc"].DefaultValue = "Criou a conta"; string hr = DateTime.Now.Hour.ToString() + ":" + DateTime.Now.Minute.ToString("0#"); sqlVerEmailEmp.InsertParameters["hr"].DefaultValue = hr; string data = DateTime.Now.Date.ToShortDateString(); sqlVerEmailEmp.InsertParameters["data"].DefaultValue = data; } void clean(){txtNome.BorderColor = Color.Empty;txtNomeResp.BorderColor = Color.Empty;txtEmail.BorderColor = Color.Empty;telefone.BorderColor = Color.Empty;cep.BorderColor = Color.Empty;cnpj.BorderColor = Color.Empty;txtNumLocal.BorderColor = Color.Empty;celular.BorderColor = Color.Empty;} protected void btnOK_Click(object sender, EventArgs e) { ServiceReference1.AtendeClienteClient ws = new ServiceReference1.AtendeClienteClient("AtendeClientePort"); try { var dados = ws.consultaCEP(cep.Text); if (dados != null) { lblUf.ForeColor = Color.Empty; lblUf.Font.Bold = false; lblUf.Text = string.Format(@"UF: {0}", dados.uf); lblCidade.Text = string.Format(@"CIDADE: {0}", dados.cidade); lblBairro.Text = string.Format(@"BAIRRO: {0}", dados.bairro); lblRua.Text = string.Format(@"RUA: {0}", dados.end); cep.BorderColor = Color.Empty; } else { lblUf.Text = string.Empty; lblCidade.Text = string.Empty; lblBairro.Text = string.Empty; lblRua.Text = string.Empty; cep.Text = string.Empty; cep.BorderColor = Color.Red; lblUf.ForeColor = Color.Red; lblUf.Font.Bold = true; lblUf.Text = "CEP INVÁLIDO/NÃO ENCONTRADO!"; } } catch { cep.BorderColor = Color.Red; lblUf.ForeColor = Color.Red; lblUf.Font.Bold = true; lblUf.Text = "CEP INVÁLIDO/NÃO ENCONTRADO OU INDISPONÍVEL NO MOMENTO!"; lblCidade.Text = string.Empty; lblBairro.Text = string.Empty; lblRua.Text = string.Empty; cep.Text = string.Empty; } } private int verify(String senha) { int nChar = senha.Length; if (nChar >= 8) { int sim = 0, num = 0, big = 0, small = 0, forca = 0; for (int i = 0; i < nChar; i++) { char atual = senha[i]; if (char.IsNumber(atual)) num++; else if (char.IsUpper(atual)) big++; else if (char.IsLower(atual)) small++; else if (!char.IsWhiteSpace(atual)) sim++; } if (sim != 0) forca++; if (num != 0) forca++; if (big != 0) forca++; if (small != 0) forca++; if (forca <= 2) return 0; else if (forca == 3) return 1; else return 2; } else return 3; } protected void btnVerifForca_Click(object sender, EventArgs e) { if (txtSenha.Text == txtConfirSenha.Text) { Session["confSenha"] = "1"; switch (verify(txtSenha.Text)) { case 0: btnVerifForca.BackColor = Color.Red; btnVerifForca.Text = "FRACO!"; lblSaved.Visible = false; Session["senhaOK"] = "0"; lblErroConta.Text = "<style='font-stretch:ultra-condensed;'>SUA SENHA DEVE TER LETRAS, NÚMEROS E CARACTERES ESPECIAIS."; txtSenha.BorderColor = Color.Red; txtConfirSenha.BorderColor = Color.Red; break; case 1: btnVerifForca.BackColor = Color.Gold; btnVerifForca.Text = "MÉDIO!"; Session["senhaPara"] = txtSenha.Text; lblSaved.Visible = true; txtSenha.Enabled = false; txtConfirSenha.Enabled = false; Session["senhaOK"] = "1"; lblErroConta.Text = string.Empty; break; case 2: btnVerifForca.BackColor = Color.Lime; btnVerifForca.Text = "FORTE!"; Session["senhaPara"] = txtSenha.Text; lblSaved.Visible = true; txtSenha.Enabled = false; txtConfirSenha.Enabled = false; Session["senhaOK"] = "1"; lblErroConta.Text = string.Empty; break; case 3: btnVerifForca.BackColor = Color.Gray; btnVerifForca.Text = "INCORRETO!"; lblSaved.Visible = false; Session["senhaOK"] = "0"; lblErroConta.Text = "SUA SENHA DEVE POSSUIR NO MINÍMO 8 CARACTERES!"; break; } } else { Session["confSenha"] = "0"; btnVerifForca.BackColor = Color.Gray; btnVerifForca.Text = "INCORRETO!"; lblErroConta.Text = "AS SENHAS NÃO CORRESPONDEM!"; } } } 